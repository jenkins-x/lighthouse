// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/jenkins-x/lighthouse/pkg/apis/lighthouse/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// LighthousePipelineSecurityPolicyLister helps list LighthousePipelineSecurityPolicies.
// All objects returned here must be treated as read-only.
type LighthousePipelineSecurityPolicyLister interface {
	// List lists all LighthousePipelineSecurityPolicies in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.LighthousePipelineSecurityPolicy, err error)
	// LighthousePipelineSecurityPolicies returns an object that can list and get LighthousePipelineSecurityPolicies.
	LighthousePipelineSecurityPolicies(namespace string) LighthousePipelineSecurityPolicyNamespaceLister
	LighthousePipelineSecurityPolicyListerExpansion
}

// lighthousePipelineSecurityPolicyLister implements the LighthousePipelineSecurityPolicyLister interface.
type lighthousePipelineSecurityPolicyLister struct {
	indexer cache.Indexer
}

// NewLighthousePipelineSecurityPolicyLister returns a new LighthousePipelineSecurityPolicyLister.
func NewLighthousePipelineSecurityPolicyLister(indexer cache.Indexer) LighthousePipelineSecurityPolicyLister {
	return &lighthousePipelineSecurityPolicyLister{indexer: indexer}
}

// List lists all LighthousePipelineSecurityPolicies in the indexer.
func (s *lighthousePipelineSecurityPolicyLister) List(selector labels.Selector) (ret []*v1alpha1.LighthousePipelineSecurityPolicy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.LighthousePipelineSecurityPolicy))
	})
	return ret, err
}

// LighthousePipelineSecurityPolicies returns an object that can list and get LighthousePipelineSecurityPolicies.
func (s *lighthousePipelineSecurityPolicyLister) LighthousePipelineSecurityPolicies(namespace string) LighthousePipelineSecurityPolicyNamespaceLister {
	return lighthousePipelineSecurityPolicyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// LighthousePipelineSecurityPolicyNamespaceLister helps list and get LighthousePipelineSecurityPolicies.
// All objects returned here must be treated as read-only.
type LighthousePipelineSecurityPolicyNamespaceLister interface {
	// List lists all LighthousePipelineSecurityPolicies in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.LighthousePipelineSecurityPolicy, err error)
	// Get retrieves the LighthousePipelineSecurityPolicy from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.LighthousePipelineSecurityPolicy, error)
	LighthousePipelineSecurityPolicyNamespaceListerExpansion
}

// lighthousePipelineSecurityPolicyNamespaceLister implements the LighthousePipelineSecurityPolicyNamespaceLister
// interface.
type lighthousePipelineSecurityPolicyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all LighthousePipelineSecurityPolicies in the indexer for a given namespace.
func (s lighthousePipelineSecurityPolicyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.LighthousePipelineSecurityPolicy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.LighthousePipelineSecurityPolicy))
	})
	return ret, err
}

// Get retrieves the LighthousePipelineSecurityPolicy from the indexer for a given namespace and name.
func (s lighthousePipelineSecurityPolicyNamespaceLister) Get(name string) (*v1alpha1.LighthousePipelineSecurityPolicy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("lighthousepipelinesecuritypolicy"), name)
	}
	return obj.(*v1alpha1.LighthousePipelineSecurityPolicy), nil
}
