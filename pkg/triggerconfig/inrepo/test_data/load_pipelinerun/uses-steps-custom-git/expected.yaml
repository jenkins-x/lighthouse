apiVersion: tekton.dev/v1beta1
kind: PipelineRun
metadata:
  creationTimestamp: null
  name: cheese
spec:
  params:
  - name: url
    value: ""
  - name: revision
    value: ""
  - name: refspec
    value: ""
  - name: submodules
    value: "true"
  - name: depth
    value: "1"
  - name: sslVerify
    value: "true"
  - name: subdirectory
    value: ""
  - name: deleteExisting
    value: "true"
  - name: httpProxy
    value: ""
  - name: httpsProxy
    value: ""
  - name: noProxy
    value: ""
  - name: verbose
    value: "true"
  - name: gitInitImage
    value: gcr.io/tekton-releases/github.com/tektoncd/pipeline/cmd/git-init:v0.18.1
  - name: BUILD_ID
    value: ""
  - name: JOB_NAME
    value: ""
  - name: JOB_SPEC
    value: ""
  - name: JOB_TYPE
    value: ""
  - name: PULL_BASE_REF
    value: ""
  - name: PULL_BASE_SHA
    value: ""
  - name: PULL_NUMBER
    value: ""
  - name: PULL_PULL_REF
    value: ""
  - name: PULL_PULL_SHA
    value: ""
  - name: PULL_REFS
    value: ""
  - name: REPO_NAME
    value: ""
  - name: REPO_OWNER
    value: ""
  - name: REPO_URL
    value: ""
  pipelineSpec:
    params:
    - description: git url to clone
      name: url
      type: string
    - default: ""
      description: git revision to checkout (branch, tag, sha, ref…)
      name: revision
      type: string
    - default: ""
      description: (optional) git refspec to fetch before checking out revision
      name: refspec
      type: string
    - default: "true"
      description: defines if the resource should initialize and fetch the submodules
      name: submodules
      type: string
    - default: "1"
      description: performs a shallow clone where only the most recent commit(s) will
        be fetched
      name: depth
      type: string
    - default: "true"
      description: defines if http.sslVerify should be set to true or false in the
        global git config
      name: sslVerify
      type: string
    - default: ""
      description: subdirectory inside the "output" workspace to clone the git repo
        into
      name: subdirectory
      type: string
    - default: "true"
      description: clean out the contents of the repo's destination directory (if
        it already exists) before trying to clone the repo there
      name: deleteExisting
      type: string
    - default: ""
      description: git HTTP proxy server for non-SSL requests
      name: httpProxy
      type: string
    - default: ""
      description: git HTTPS proxy server for SSL requests
      name: httpsProxy
      type: string
    - default: ""
      description: git no proxy - opt out of proxying HTTP/HTTPS requests
      name: noProxy
      type: string
    - default: "true"
      description: log the commands used during execution
      name: verbose
      type: string
    - default: gcr.io/tekton-releases/github.com/tektoncd/pipeline/cmd/git-init:v0.18.1
      description: the image used where the git-init binary is
      name: gitInitImage
      type: string
    - description: the unique build number
      name: BUILD_ID
      type: string
    - description: the name of the job which is the trigger context name
      name: JOB_NAME
      type: string
    - description: the specification of the job
      name: JOB_SPEC
      type: string
    - description: '''the kind of job: postsubmit or presubmit'''
      name: JOB_TYPE
      type: string
    - description: the base git reference of the pull request
      name: PULL_BASE_REF
      type: string
    - description: the git sha of the base of the pull request
      name: PULL_BASE_SHA
      type: string
    - default: ""
      description: git pull request number
      name: PULL_NUMBER
      type: string
    - default: ""
      description: git pull request ref in the form 'refs/pull/$PULL_NUMBER/head'
      name: PULL_PULL_REF
      type: string
    - default: ""
      description: git revision to checkout (branch, tag, sha, ref…)
      name: PULL_PULL_SHA
      type: string
    - description: git pull reference strings of base and latest in the form 'master:$PULL_BASE_SHA,$PULL_NUMBER:$PULL_PULL_SHA:refs/pull/$PULL_NUMBER/head'
      name: PULL_REFS
      type: string
    - description: git repository name
      name: REPO_NAME
      type: string
    - description: git repository owner (user or organisation)
      name: REPO_OWNER
      type: string
    - description: git url to clone
      name: REPO_URL
      type: string
    results:
    - description: The precise commit SHA that was fetched by this Task
      name: commit
      value: ""
    - description: The precise URL that was fetched by this Task
      name: url
      value: ""
    tasks:
    - name: from-build-pack
      params:
      - name: BUILD_ID
        value: $(params.BUILD_ID)
      - name: JOB_NAME
        value: $(params.JOB_NAME)
      - name: JOB_SPEC
        value: $(params.JOB_SPEC)
      - name: JOB_TYPE
        value: $(params.JOB_TYPE)
      - name: PULL_BASE_REF
        value: $(params.PULL_BASE_REF)
      - name: PULL_BASE_SHA
        value: $(params.PULL_BASE_SHA)
      - name: PULL_NUMBER
        value: $(params.PULL_NUMBER)
      - name: PULL_PULL_REF
        value: $(params.PULL_PULL_REF)
      - name: PULL_PULL_SHA
        value: $(params.PULL_PULL_SHA)
      - name: PULL_REFS
        value: $(params.PULL_REFS)
      - name: REPO_NAME
        value: $(params.REPO_NAME)
      - name: REPO_OWNER
        value: $(params.REPO_OWNER)
      - name: REPO_URL
        value: $(params.REPO_URL)
      taskSpec:
        metadata: {}
        params:
        - description: the unique build number
          name: BUILD_ID
          type: string
        - description: the name of the job which is the trigger context name
          name: JOB_NAME
          type: string
        - description: the specification of the job
          name: JOB_SPEC
          type: string
        - description: '''the kind of job: postsubmit or presubmit'''
          name: JOB_TYPE
          type: string
        - description: the base git reference of the pull request
          name: PULL_BASE_REF
          type: string
        - description: the git sha of the base of the pull request
          name: PULL_BASE_SHA
          type: string
        - default: ""
          description: git pull request number
          name: PULL_NUMBER
          type: string
        - default: ""
          description: git pull request ref in the form 'refs/pull/$PULL_NUMBER/head'
          name: PULL_PULL_REF
          type: string
        - default: ""
          description: git revision to checkout (branch, tag, sha, ref…)
          name: PULL_PULL_SHA
          type: string
        - description: git pull reference strings of base and latest in the form 'master:$PULL_BASE_SHA,$PULL_NUMBER:$PULL_PULL_SHA:refs/pull/$PULL_NUMBER/head'
          name: PULL_REFS
          type: string
        - description: git repository name
          name: REPO_NAME
          type: string
        - description: git repository owner (user or organisation)
          name: REPO_OWNER
          type: string
        - description: git url to clone
          name: REPO_URL
          type: string
        - description: git url to clone
          name: url
          type: string
        - default: ""
          description: git revision to checkout (branch, tag, sha, ref…)
          name: revision
          type: string
        - default: ""
          description: (optional) git refspec to fetch before checking out revision
          name: refspec
          type: string
        - default: "true"
          description: defines if the resource should initialize and fetch the submodules
          name: submodules
          type: string
        - default: "1"
          description: performs a shallow clone where only the most recent commit(s)
            will be fetched
          name: depth
          type: string
        - default: "true"
          description: defines if http.sslVerify should be set to true or false in
            the global git config
          name: sslVerify
          type: string
        - default: ""
          description: subdirectory inside the "output" workspace to clone the git
            repo into
          name: subdirectory
          type: string
        - default: "true"
          description: clean out the contents of the repo's destination directory
            (if it already exists) before trying to clone the repo there
          name: deleteExisting
          type: string
        - default: ""
          description: git HTTP proxy server for non-SSL requests
          name: httpProxy
          type: string
        - default: ""
          description: git HTTPS proxy server for SSL requests
          name: httpsProxy
          type: string
        - default: ""
          description: git no proxy - opt out of proxying HTTP/HTTPS requests
          name: noProxy
          type: string
        - default: "true"
          description: log the commands used during execution
          name: verbose
          type: string
        - default: gcr.io/tekton-releases/github.com/tektoncd/pipeline/cmd/git-init:v0.18.1
          description: the image used where the git-init binary is
          name: gitInitImage
          type: string
        results:
        - description: The precise commit SHA that was fetched by this Task
          name: commit
        - description: The precise URL that was fetched by this Task
          name: url
        spec: null
        stepTemplate:
          env:
          - name: BUILD_ID
            value: $(params.BUILD_ID)
          - name: JOB_NAME
            value: $(params.JOB_NAME)
          - name: JOB_SPEC
            value: $(params.JOB_SPEC)
          - name: JOB_TYPE
            value: $(params.JOB_TYPE)
          - name: PULL_BASE_REF
            value: $(params.PULL_BASE_REF)
          - name: PULL_BASE_SHA
            value: $(params.PULL_BASE_SHA)
          - name: PULL_NUMBER
            value: $(params.PULL_NUMBER)
          - name: PULL_PULL_REF
            value: $(params.PULL_PULL_REF)
          - name: PULL_PULL_SHA
            value: $(params.PULL_PULL_SHA)
          - name: PULL_REFS
            value: $(params.PULL_REFS)
          - name: REPO_NAME
            value: $(params.REPO_NAME)
          - name: REPO_OWNER
            value: $(params.REPO_OWNER)
          - name: REPO_URL
            value: $(params.REPO_URL)
          name: ""
          resources:
            requests:
              cpu: 400m
              memory: 512Mi
          volumeMounts:
          - mountPath: /tekton/home/npm
            name: npmrc
          workingDir: /workspace/source
        steps:
        - env:
          - name: PARAM_URL
            value: $(params.url)
          - name: PARAM_REVISION
            value: $(params.revision)
          - name: PARAM_REFSPEC
            value: $(params.refspec)
          - name: PARAM_SUBMODULES
            value: $(params.submodules)
          - name: PARAM_DEPTH
            value: $(params.depth)
          - name: PARAM_SSL_VERIFY
            value: $(params.sslVerify)
          - name: PARAM_SUBDIRECTORY
            value: $(params.subdirectory)
          - name: PARAM_DELETE_EXISTING
            value: $(params.deleteExisting)
          - name: PARAM_HTTP_PROXY
            value: $(params.httpProxy)
          - name: PARAM_HTTPS_PROXY
            value: $(params.httpsProxy)
          - name: PARAM_NO_PROXY
            value: $(params.noProxy)
          - name: PARAM_VERBOSE
            value: $(params.verbose)
          - name: WORKSPACE_OUTPUT_PATH
            value: $(workspaces.output.path)
          image: $(params.gitInitImage)
          name: clone
          resources: {}
          script: |
            #!/bin/sh
            set -eu -o pipefail

            if [[ "${PARAM_VERBOSE}" == "true" ]] ; then
              set -x
            fi

            CHECKOUT_DIR="${WORKSPACE_OUTPUT_PATH}/${PARAM_SUBDIRECTORY}"

            cleandir() {
              # Delete any existing contents of the repo directory if it exists.
              #
              # We don't just "rm -rf $CHECKOUT_DIR" because $CHECKOUT_DIR might be "/"
              # or the root of a mounted volume.
              if [[ -d "$CHECKOUT_DIR" ]] ; then
                # Delete non-hidden files and directories
                rm -rf "$CHECKOUT_DIR"/*
                # Delete files and directories starting with . but excluding ..
                rm -rf "$CHECKOUT_DIR"/.[!.]*
                # Delete files and directories starting with .. plus any other character
                rm -rf "$CHECKOUT_DIR"/..?*
              fi
            }

            if [[ "${PARAM_DELETE_EXISTING}" == "true" ]] ; then
              cleandir
            fi

            test -z "${PARAM_HTTP_PROXY}" || export HTTP_PROXY="${PARAM_HTTP_PROXY}"
            test -z "${PARAM_HTTPS_PROXY}" || export HTTPS_PROXY="${PARAM_HTTPS_PROXY}"
            test -z "${PARAM_NO_PROXY}" || export NO_PROXY="${PARAM_NO_PROXY}"

            /ko-app/git-init \
              -url "${PARAM_URL}" \
              -revision "${PARAM_REVISION}" \
              -refspec "${PARAM_REFSPEC}" \
              -path "$CHECKOUT_DIR" \
              -sslVerify="${PARAM_SSL_VERIFY}" \
              -submodules="${PARAM_SUBMODULES}" \
              -depth "${PARAM_DEPTH}"
            cd "$CHECKOUT_DIR"
            RESULT_SHA="$(git rev-parse HEAD)"
            EXIT_CODE="$?"
            if [ "$EXIT_CODE" != 0 ] ; then
              exit $EXIT_CODE
            fi
            # ensure we don't add a trailing newline to the result
            echo -n "$RESULT_SHA" > $(results.commit.path)
            echo -n "${PARAM_URL}" > $(results.url.path)
        - image: gcr.io/jenkinsxio/jx-boot:3.1.155
          name: jx-variables
          resources: {}
          script: |
            #!/usr/bin/env sh
            jx gitops variables
        - image: node:12-slim
          name: build-npm-install
          resources: {}
          script: |
            #!/bin/sh
            npm install
        - image: node:12-slim
          name: build-npm-test
          resources: {}
          script: |
            #!/bin/sh
            CI=true DISPLAY=:99 npm test
        - image: gcr.io/kaniko-project/executor:debug-v1.3.0
          name: build-container-build
          resources: {}
          script: |
            #!/busybox/sh
            source .jx/variables.sh
            cp /tekton/creds-secrets/tekton-container-registry-auth/.dockerconfigjson /kaniko/.docker/config.json
            /kaniko/executor $KANIKO_FLAGS --context=/workspace/source --dockerfile=Dockerfile --destination=$DOCKER_REGISTRY/$DOCKER_REGISTRY_ORG/$APP_NAME:$VERSION
        - image: gcr.io/jenkinsxio/jx-preview:0.0.143
          name: promote-jx-preview
          resources: {}
          script: |
            #!/usr/bin/env sh
            source .jx/variables.sh
            jx preview create
        volumes:
        - name: npmrc
          secret:
            optional: true
            secretName: npmrc
        workspaces:
        - description: The git repo will be cloned onto the volume backing this workspace
          name: output
      workspaces:
      - name: output
        workspace: output
    workspaces:
    - description: The git repo will be cloned onto the volume backing this workspace
      name: output
  workspaces:
  - emptyDir: {}
    name: output
status: {}
